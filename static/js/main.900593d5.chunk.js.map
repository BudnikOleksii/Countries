{"version":3,"sources":["types/RegionsFilter.ts","components/CountryLink/CountryLink.tsx","components/CountryCard/CountryCard.tsx","app/hooks.ts","api/countries.ts","features/countriesSlice.ts","features/filterSlice.ts","app/store.ts","components/Filter/Filter.tsx","App.tsx","components/CountryModal/CountryModal.tsx","index.tsx"],"names":["RegionsFilter","CountryLink","memo","countryName","text","to","style","textDecoration","color","CountryCard","country","name","flags","region","population","capital","Grid","item","xs","sm","md","lg","Card","sx","maxWidth","CardMedia","component","height","image","svg","alt","common","CardContent","Typography","gutterBottom","variant","List","ListItem","disablePadding","ListItemIcon","ListItemText","primary","CardActions","Button","size","useAppDispatch","useDispatch","useAppSelector","useSelector","BASE_URL","ENDPOINTS","code","client","url","data","options","method","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","request","fetchCountriesByRegion","createAsyncThunk","fetchAllCountries","_","thunkAPI","a","dispatch","Oceania","Africa","Americas","Asia","Europe","countriesSlice","createSlice","initialState","countries","countriesIsLoading","countriesError","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","meta","arg","payload","rejected","error","filterSlice","filterType","appliedQuery","setFilterType","setAppliedQuery","actions","store","configureStore","reducer","countriesState","countriesStateReducer","filtersState","filterStateReducer","selectors","visibleCountries","query","toLowerCase","Object","values","forEach","regionCountries","push","filter","includes","Filter","useState","inputQuery","setInputQuery","applyQuery","useDebouncedCallback","value","container","TextField","fullWidth","label","margin","onChange","event","target","FormControl","InputLabel","id","Select","MenuItem","App","preparedCountries","useEffect","className","Paper","elevation","LinearProgress","padding","spacing","map","CountryModal","useParams","navigate","useNavigate","setCountry","isLoading","setIsLoading","setError","borderCountries","setBorderCountries","getCountryByName","res","catch","finally","borders","requests","countryCode","Promise","all","result","border","Modal","open","Boolean","onClose","aria-labelledby","aria-describedby","display","alignItems","justifyContent","Box","width","backgroundColor","textAlign","src","nativeName","subregion","tld","currencies","languages","join","length","marginTop","ReactDOM","render","StrictMode","path","element","replace","document","getElementById"],"mappings":"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","file":"static/js/main.900593d5.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum RegionsFilter {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n}\n","import React, { FC, memo } from 'react';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  countryName: string,\n  text: string,\n};\n\nexport const CountryLink: FC<Props> = memo(({ countryName, text }) => (\n  <Link\n    to={`/country/${countryName}`}\n    style={{ textDecoration: 'none', color: 'inherit' }}\n  >\n    {text}\n  </Link>\n));\n","import React, { FC, memo } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Typography from '@mui/material/Typography';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport SouthAmericaIcon from '@mui/icons-material/SouthAmerica';\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport LocationCityIcon from '@mui/icons-material/LocationCity';\nimport Grid from '@mui/material/Grid';\nimport { Country } from '../../types/Country';\nimport { CountryLink } from '../CountryLink';\n\ninterface Props {\n  country: Country;\n}\n\nexport const CountryCard: FC<Props> = memo(({ country }) => {\n  const {\n    name, flags, region, population, capital,\n  } = country;\n\n  return (\n    <Grid item xs={12} sm={6} md={4} lg={2}>\n      <Card sx={{ maxWidth: 345 }}>\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image={flags.svg}\n          alt={name.common}\n        />\n\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {name.common}\n          </Typography>\n\n          <List>\n            <ListItem disablePadding>\n              <ListItemIcon>\n                <SouthAmericaIcon />\n              </ListItemIcon>\n\n              <ListItemText primary={`Region: ${region}`} />\n            </ListItem>\n\n            <ListItem disablePadding>\n              <ListItemIcon>\n                <GroupsIcon />\n              </ListItemIcon>\n\n              <ListItemText primary={`Population: ${population}`} />\n            </ListItem>\n\n            <ListItem disablePadding>\n              <ListItemIcon>\n                <LocationCityIcon />\n              </ListItemIcon>\n\n              <ListItemText primary={`Capital: ${capital}`} />\n            </ListItem>\n          </List>\n        </CardContent>\n\n        <CardActions>\n          <Button size=\"small\" sx={{ color: '#777' }}>\n            <CountryLink countryName={name.common} text=\"Learn more\" />\n          </Button>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n});\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RegionsFilter } from '../types/RegionsFilter';\nimport { Country, CountryDetails } from '../types/Country';\n\nconst BASE_URL = 'https://restcountries.com/v3.1';\n\nexport const ENDPOINTS = {\n  all: '/all',\n  byRegionName: (region: RegionsFilter) => `/region/${region}`,\n  byName: (name: string) => `/name/${name}`,\n  byCode: (code: string) => `/alpha/${code}`,\n};\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nconst request = <T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> => {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n\nexport const getCountriesByRegion = (region: RegionsFilter) => {\n  return client.get<Country[]>(ENDPOINTS.byRegionName(region));\n};\n\nexport const getCountryByName = (name: string) => {\n  return client.get<CountryDetails[]>(ENDPOINTS.byName(name));\n};\n\nexport const getCountryByCode = (code: string) => {\n  return client.get<Country[]>(ENDPOINTS.byCode(code));\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { Country } from '../types/Country';\nimport { getCountriesByRegion } from '../api/countries';\nimport { RegionsFilter } from '../types/RegionsFilter';\n\ninterface CurrentPostState {\n  countries: { [key: string] : Country[] };\n  countriesIsLoading: boolean;\n  countriesError: string;\n}\n\nconst initialState: CurrentPostState = {\n  countries: {},\n  countriesIsLoading: false,\n  countriesError: '',\n};\n\nexport const fetchCountriesByRegion = createAsyncThunk(\n  'countries/fetch_countriesByRegion',\n  getCountriesByRegion,\n);\n\nexport const fetchAllCountries = createAsyncThunk(\n  'countries/fetch_countries',\n  async (_, thunkAPI) => {\n    thunkAPI.dispatch(fetchCountriesByRegion(RegionsFilter.Oceania));\n    thunkAPI.dispatch(fetchCountriesByRegion(RegionsFilter.Africa));\n    thunkAPI.dispatch(fetchCountriesByRegion(RegionsFilter.Americas));\n    thunkAPI.dispatch(fetchCountriesByRegion(RegionsFilter.Asia));\n    thunkAPI.dispatch(fetchCountriesByRegion(RegionsFilter.Europe));\n  },\n);\n\nexport const countriesSlice = createSlice({\n  name: 'countriesState',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchCountriesByRegion.pending, (state) => {\n      state.countriesIsLoading = true;\n    });\n\n    builder.addCase(fetchCountriesByRegion.fulfilled, (state, action) => {\n      state.countries[action.meta.arg] = action.payload;\n      state.countriesIsLoading = false;\n    });\n\n    builder.addCase(fetchCountriesByRegion.rejected, (state, action) => {\n      state.countriesError = action.error.name || '';\n      state.countriesIsLoading = false;\n    });\n  },\n});\n\nexport default countriesSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { RegionsFilter } from '../types/RegionsFilter';\n\ninterface FilterState {\n  filterType: RegionsFilter | '',\n  appliedQuery: string,\n}\n\nconst initialState: FilterState = {\n  filterType: '',\n  appliedQuery: '',\n};\n\nconst filterSlice = createSlice({\n  name: 'filterState',\n  initialState,\n  reducers: {\n    setFilterType: (state, action) => {\n      state.filterType = action.payload;\n    },\n    setAppliedQuery: (state, action) => {\n      state.appliedQuery = action.payload;\n    },\n  },\n});\n\nexport const { setFilterType, setAppliedQuery } = filterSlice.actions;\nexport default filterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport countriesStateReducer from '../features/countriesSlice';\nimport filterStateReducer from '../features/filterSlice';\nimport { Country } from '../types/Country';\n\nexport const store = configureStore({\n  reducer: {\n    countriesState: countriesStateReducer,\n    filtersState: filterStateReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nconst getPreparedCountries = (state: RootState) => {\n  const { countries } = state.countriesState;\n  const { filterType, appliedQuery } = state.filtersState;\n\n  let visibleCountries: Country[] = [];\n  const query = appliedQuery.toLowerCase();\n\n  if (filterType) {\n    visibleCountries = countries[filterType];\n  } else {\n    Object.values(countries).forEach(regionCountries => {\n      visibleCountries.push(...regionCountries);\n    });\n  }\n\n  return visibleCountries.filter(country => (\n    country.name.common.toLowerCase().includes(query)\n  ));\n};\n\nexport const selectors = {\n  getCountries: (state: RootState) => state.countriesState,\n  getFilters: (state: RootState) => state.filtersState,\n  getPreparedCountries,\n};\n","import React, {\n  ChangeEvent, FC, useState,\n} from 'react';\nimport Grid from '@mui/material/Grid';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport TextField from '@mui/material/TextField';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { RegionsFilter } from '../../types/RegionsFilter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { selectors } from '../../app/store';\nimport { setAppliedQuery, setFilterType } from '../../features/filterSlice';\n\nexport const Filter: FC = () => {\n  const dispatch = useAppDispatch();\n  const { filterType } = useAppSelector(selectors.getFilters);\n  const [inputQuery, setInputQuery] = useState('');\n\n  const applyQuery = useDebouncedCallback((value: string) => {\n    dispatch(setAppliedQuery(value));\n  }, 300);\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  return (\n    <Grid container item xs={12}>\n      <Grid item xs={12} sm={5} md={2}>\n        <TextField\n          fullWidth\n          label=\"Country\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={inputQuery}\n          onChange={handleQueryChange}\n        />\n      </Grid>\n\n      <Grid item xs={0} sm={2} md={8} />\n\n      <Grid item xs={12} sm={5} md={2}>\n        <FormControl fullWidth margin=\"normal\">\n          <InputLabel id=\"demo-simple-select-label\">Region</InputLabel>\n\n          <Select\n            value={filterType}\n            label=\"Region\"\n            onChange={(event) => {\n              dispatch(setFilterType(event.target.value));\n            }}\n          >\n            <MenuItem value=\"\">All</MenuItem>\n            <MenuItem value={RegionsFilter.Africa}>Africa</MenuItem>\n            <MenuItem value={RegionsFilter.Americas}>Americas</MenuItem>\n            <MenuItem value={RegionsFilter.Asia}>Asia</MenuItem>\n            <MenuItem value={RegionsFilter.Europe}>Europe</MenuItem>\n            <MenuItem value={RegionsFilter.Oceania}>Oceania</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { CountryCard } from './components/CountryCard';\nimport { Filter } from './components/Filter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { fetchAllCountries } from './features/countriesSlice';\nimport { selectors } from './app/store';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { countriesError, countriesIsLoading } = useAppSelector(selectors.getCountries);\n  const preparedCountries = useAppSelector(selectors.getPreparedCountries);\n\n  useEffect(() => {\n    dispatch(fetchAllCountries());\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Paper elevation={8}>\n        <h1 className=\"app__header\">Where in the world?</h1>\n      </Paper>\n\n      {countriesIsLoading && <LinearProgress />}\n\n      {!countriesError && !countriesIsLoading && (\n        <Paper elevation={16} style={{ padding: '20px' }}>\n          <Filter />\n          <Grid container spacing={2}>\n            {preparedCountries.map(country => (\n              <CountryCard country={country} key={country.name.common} />\n            ))}\n          </Grid>\n        </Paper>\n      )}\n    </div>\n  );\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport Modal from '@mui/material/Modal';\nimport Paper from '@mui/material/Paper';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Typography from '@mui/material/Typography';\nimport SouthAmericaIcon from '@mui/icons-material/SouthAmerica';\nimport BadgeIcon from '@mui/icons-material/Badge';\nimport GroupsIcon from '@mui/icons-material/Groups';\nimport LocationCityIcon from '@mui/icons-material/LocationCity';\nimport DomainIcon from '@mui/icons-material/Domain';\nimport CurrencyExchangeIcon from '@mui/icons-material/CurrencyExchange';\nimport TranslateIcon from '@mui/icons-material/Translate';\nimport TravelExploreIcon from '@mui/icons-material/TravelExplore';\nimport Button from '@mui/material/Button';\nimport { getCountryByCode, getCountryByName } from '../../api/countries';\nimport { CountryDetails } from '../../types/Country';\nimport { CountryLink } from '../CountryLink';\n\nexport const CountryModal: FC = () => {\n  const { name = '' } = useParams();\n  const navigate = useNavigate();\n  const [country, setCountry] = useState<CountryDetails | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [borderCountries, setBorderCountries] = useState<string[]>([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getCountryByName(name)\n      .then((res) => setCountry(res[0]))\n      .catch(setError)\n      .finally(() => setIsLoading(false));\n  }, [name]);\n\n  useEffect(() => {\n    if (country && country.borders) {\n      const requests = country.borders.map(countryCode => (\n        getCountryByCode(countryCode)\n      ));\n\n      Promise.all(requests)\n        .then(res => {\n          const result: string[] = [];\n\n          res.forEach(border => {\n            result.push(border[0].name.common);\n          });\n\n          setBorderCountries(result);\n        })\n        .catch(setError);\n    }\n  }, [country]);\n\n  return (\n    <Modal\n      open={Boolean(name)}\n      onClose={() => navigate('/')}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n      sx={{\n        display: 'flex', alignItems: 'center', justifyContent: 'center',\n      }}\n    >\n      <Box sx={{\n        width: '80vw', backgroundColor: '#fff',\n      }}\n      >\n        {isLoading && <LinearProgress />}\n\n        {country && !error && (\n          <Paper elevation={16} sx={{ padding: '20px', textAlign: 'center', backgroundColor: 'eee' }}>\n            <Typography gutterBottom variant=\"h3\" component=\"div\" sx={{ width: '100%' }}>\n              {country.name.common}\n            </Typography>\n\n            <div className=\"flex-between\">\n              <div className=\"card-block\">\n                <img className=\"card-block__img\" src={country.flags.svg} alt={country.name.common} />\n\n              </div>\n\n              <List>\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <BadgeIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Native Name: ${Object.values(country.name.nativeName)[0].common}`} />\n                </ListItem>\n\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <GroupsIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Population: ${country.population}`} />\n                </ListItem>\n\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <TravelExploreIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Region: ${country.region}`} />\n                </ListItem>\n\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <SouthAmericaIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Sub Region: ${country.subregion}`} />\n                </ListItem>\n\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <LocationCityIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Capital: ${country.capital}`} />\n                </ListItem>\n              </List>\n\n              <List>\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <DomainIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Top Level Domain: ${country.tld[0]}`} />\n                </ListItem>\n\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <CurrencyExchangeIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Currencies: ${Object.values(country.currencies)[0].name}`} />\n                </ListItem>\n\n                <ListItem disablePadding>\n                  <ListItemIcon>\n                    <TranslateIcon />\n                  </ListItemIcon>\n                  <ListItemText primary={`Languages: ${Object.values(country.languages).join(', ')}`} />\n                </ListItem>\n              </List>\n            </div>\n\n            {borderCountries.length > 0 && (\n              <div className=\"flex-between\" style={{ marginTop: '20px' }}>\n                { 'Boarders: '}\n                {borderCountries.map(border => (\n                  <Button variant=\"outlined\" size=\"small\" sx={{ color: '#777' }} key={border}>\n                    <CountryLink countryName={border} text={border} />\n                  </Button>\n                ))}\n              </div>\n            )}\n          </Paper>\n        )}\n      </Box>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\nimport { CountryModal } from './components/CountryModal';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"country\">\n            <Route path=\":name\" element={<CountryModal />} />\n          </Route>\n          <Route path=\"*\" element={<h1>Page not found</h1>} />\n        </Routes>\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}