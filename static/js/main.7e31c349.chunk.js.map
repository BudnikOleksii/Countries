{"version":3,"sources":["types/RegionsFilter.ts","components/CountryCard/CountryCard.tsx","app/hooks.ts","api/countries.ts","features/countriesSlice.ts","features/filterSlice.ts","app/store.ts","components/Filter/Filter.tsx","App.tsx","index.tsx"],"names":["RegionsFilter","CountryCard","memo","country","name","flags","region","population","capital","Grid","item","xs","sm","md","lg","Card","sx","maxWidth","CardMedia","component","height","image","svg","alt","CardContent","Typography","gutterBottom","variant","common","List","ListItem","disablePadding","ListItemButton","ListItemText","primary","CardActions","Button","size","useAppDispatch","useDispatch","useAppSelector","useSelector","BASE_URL","ENDPOINTS","client","url","data","options","method","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","request","fetchCountriesByRegion","createAsyncThunk","countriesSlice","createSlice","initialState","countries","countriesIsLoading","countriesError","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","meta","arg","payload","rejected","error","filterSlice","filterType","appliedQuery","setFilterType","setAppliedQuery","actions","store","configureStore","reducer","countriesState","countriesStateReducer","filtersState","filterStateReducer","selectors","visibleCountries","query","toLowerCase","Object","values","forEach","regionCountries","concat","filter","includes","Filter","dispatch","useState","inputQuery","setInputQuery","applyQuery","useDebouncedCallback","value","container","TextField","fullWidth","label","margin","onChange","event","target","FormControl","InputLabel","id","Select","MenuItem","Africa","Americas","Asia","Europe","Oceania","App","preparedCountries","useEffect","className","Paper","elevation","LinearProgress","style","padding","spacing","map","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.7e31c349.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum RegionsFilter {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n}\n","import React, { FC, memo } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport Typography from '@mui/material/Typography';\nimport { Grid } from '@mui/material';\nimport { Country } from '../../types/Country';\n\ninterface Props {\n  country: Country;\n}\n\nexport const CountryCard: FC<Props> = memo(({ country }) => {\n  const {\n    name, flags, region, population, capital,\n  } = country;\n\n  return (\n    <Grid item xs={12} sm={6} md={4} lg={2}>\n      <Card sx={{ maxWidth: 345 }}>\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image={flags.svg}\n          alt=\"green iguana\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {name.common}\n          </Typography>\n          <List>\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemText primary={`Region: ${region}`} />\n              </ListItemButton>\n            </ListItem>\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemText primary={`Population: ${population}`} />\n              </ListItemButton>\n            </ListItem>\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemText primary={`Capital: ${capital}`} />\n              </ListItemButton>\n            </ListItem>\n          </List>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\">Learn More</Button>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n});\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RegionsFilter } from '../types/RegionsFilter';\nimport { Country } from '../types/Country';\n\nconst BASE_URL = 'https://restcountries.com/v3.1';\n\nexport const ENDPOINTS = {\n  all: '/all',\n  region: (region: RegionsFilter) => `/region/${region}`,\n};\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nconst request = <T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> => {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n\nexport const getCountriesByRegion = (region: RegionsFilter) => {\n  return client.get<Country[]>(ENDPOINTS.region(region));\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { Country } from '../types/Country';\nimport { getCountriesByRegion } from '../api/countries';\n\ninterface CurrentPostState {\n  countries: { [key: string] : Country[] };\n  countriesIsLoading: boolean;\n  countriesError: string;\n}\n\nconst initialState: CurrentPostState = {\n  countries: {},\n  countriesIsLoading: false,\n  countriesError: '',\n};\n\nexport const fetchCountriesByRegion = createAsyncThunk(\n  'countries/fetch_countriesByRegion',\n  getCountriesByRegion,\n);\n\nexport const countriesSlice = createSlice({\n  name: 'countriesState',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchCountriesByRegion.pending, (state) => {\n      state.countriesIsLoading = true;\n    });\n\n    builder.addCase(fetchCountriesByRegion.fulfilled, (state, action) => {\n      state.countries[action.meta.arg] = action.payload;\n      state.countriesIsLoading = false;\n    });\n\n    builder.addCase(fetchCountriesByRegion.rejected, (state, action) => {\n      state.countriesError = action.error.name || '';\n      state.countriesIsLoading = false;\n    });\n  },\n});\n\nexport default countriesSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { RegionsFilter } from '../types/RegionsFilter';\n\ninterface FilterState {\n  filterType: RegionsFilter | '',\n  appliedQuery: string,\n}\n\nconst initialState: FilterState = {\n  filterType: '',\n  appliedQuery: '',\n};\n\nconst filterSlice = createSlice({\n  name: 'filterState',\n  initialState,\n  reducers: {\n    setFilterType: (state, action) => {\n      state.filterType = action.payload;\n    },\n    setAppliedQuery: (state, action) => {\n      state.appliedQuery = action.payload;\n    },\n  },\n});\n\nexport const { setFilterType, setAppliedQuery } = filterSlice.actions;\nexport default filterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport countriesStateReducer from '../features/countriesSlice';\nimport filterStateReducer from '../features/filterSlice';\nimport { Country } from '../types/Country';\n\nexport const store = configureStore({\n  reducer: {\n    countriesState: countriesStateReducer,\n    filtersState: filterStateReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nconst getPreparedCountries = (state: RootState) => {\n  const { countries } = state.countriesState;\n  const { filterType, appliedQuery } = state.filtersState;\n\n  let visibleCountries: Country[] = [];\n  const query = appliedQuery.toLowerCase();\n\n  if (filterType) {\n    visibleCountries = countries[filterType];\n  } else {\n    Object.values(countries).forEach(regionCountries => {\n      visibleCountries.concat(regionCountries);\n    });\n  }\n\n  return visibleCountries.filter(country => (\n    country.name.common.toLowerCase().includes(query)\n  ));\n};\n\nexport const selectors = {\n  getCountries: (state: RootState) => state.countriesState,\n  getFilters: (state: RootState) => state.filtersState,\n  getPreparedCountries,\n};\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n  >;\n/* eslint-enable @typescript-eslint/indent */\n","import React, {\n  ChangeEvent, FC, useState,\n} from 'react';\nimport {\n  FormControl,\n  Grid, InputLabel, MenuItem, Select, TextField,\n} from '@mui/material';\nimport { useDebouncedCallback } from 'use-debounce';\nimport { RegionsFilter } from '../../types/RegionsFilter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { selectors } from '../../app/store';\nimport { setAppliedQuery, setFilterType } from '../../features/filterSlice';\n\nexport const Filter: FC = () => {\n  const dispatch = useAppDispatch();\n  const { filterType } = useAppSelector(selectors.getFilters);\n  const [inputQuery, setInputQuery] = useState('');\n\n  const applyQuery = useDebouncedCallback((value: string) => {\n    dispatch(setAppliedQuery(value));\n  }, 300);\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  return (\n    <Grid container item xs={12}>\n      <Grid item xs={12} sm={5} md={2}>\n        <TextField\n          fullWidth\n          label=\"Country\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={inputQuery}\n          onChange={handleQueryChange}\n        />\n      </Grid>\n      <Grid item xs={0} sm={2} md={8} />\n      <Grid item xs={12} sm={5} md={2}>\n\n        <FormControl fullWidth margin=\"normal\">\n          <InputLabel id=\"demo-simple-select-label\">Region</InputLabel>\n          <Select\n            value={filterType}\n            label=\"Region\"\n            onChange={(event) => {\n              dispatch(setFilterType(event.target.value));\n            }}\n          >\n            <MenuItem value=\"\">All</MenuItem>\n            <MenuItem value={RegionsFilter.Africa}>Africa</MenuItem>\n            <MenuItem value={RegionsFilter.Americas}>Americas</MenuItem>\n            <MenuItem value={RegionsFilter.Asia}>Asia</MenuItem>\n            <MenuItem value={RegionsFilter.Europe}>Europe</MenuItem>\n            <MenuItem value={RegionsFilter.Oceania}>Oceania</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport { Grid, Paper } from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { CountryCard } from './components/CountryCard';\nimport { Filter } from './components/Filter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { fetchCountriesByRegion } from './features/countriesSlice';\nimport { RegionsFilter } from './types/RegionsFilter';\nimport { selectors } from './app/store';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { countriesError, countriesIsLoading } = useAppSelector(selectors.getCountries);\n  const preparedCountries = useAppSelector(selectors.getPreparedCountries);\n\n  useEffect(() => {\n    dispatch(fetchCountriesByRegion(RegionsFilter.Africa));\n    dispatch(fetchCountriesByRegion(RegionsFilter.Americas));\n    dispatch(fetchCountriesByRegion(RegionsFilter.Asia));\n    dispatch(fetchCountriesByRegion(RegionsFilter.Europe));\n    dispatch(fetchCountriesByRegion(RegionsFilter.Oceania));\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Paper elevation={8}>\n        <h1 className=\"app__header\">Where in the world?</h1>\n      </Paper>\n\n      {countriesIsLoading && <LinearProgress />}\n\n      {!countriesError && (\n        <Paper elevation={16} style={{ padding: '20px' }}>\n          <Filter />\n          <Grid container spacing={2}>\n            {preparedCountries.map(country => (\n              <CountryCard country={country} key={country.name.common} />\n            ))}\n          </Grid>\n        </Paper>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n          <Route path=\"*\" element={<h1>Page not found</h1>} />\n        </Routes>\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}