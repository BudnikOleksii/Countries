{"version":3,"sources":["types/RegionsFilter.ts","api/countries.ts","components/CountryCard/CountryCard.tsx","components/Filter/Filter.tsx","App.tsx","index.tsx"],"names":["RegionsFilter","BASE_URL","ENDPOINTS","client","url","data","options","method","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","request","CountryCard","memo","country","name","flags","region","population","capital","Grid","item","xs","Card","sx","maxWidth","CardMedia","component","height","image","svg","alt","CardContent","Typography","gutterBottom","variant","common","List","ListItem","disablePadding","ListItemButton","ListItemText","primary","CardActions","Button","size","Filter","useSearchParams","searchParams","setSearchParams","appliedQuery","get","useState","inputQuery","setInputQuery","applyQuery","useCallback","debounce","query","container","TextField","fullWidth","label","margin","value","onChange","event","target","FormControl","InputLabel","id","Select","regionFilter","MenuItem","Africa","Americas","Asia","Europe","Oceania","App","countries","setCountries","isLoading","setIsLoading","error","setError","useEffect","catch","finally","preparedCountries","useMemo","toLowerCase","filter","includes","className","Paper","elevation","LinearProgress","style","padding","spacing","map","ReactDOM","render","StrictMode","path","index","element","document","getElementById"],"mappings":"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","file":"static/js/main.2ea26a11.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum RegionsFilter {\n  Africa = 'Africa',\n  Americas = 'Americas',\n  Asia = 'Asia',\n  Europe = 'Europe',\n  Oceania = 'Oceania',\n}\n","const BASE_URL = 'https://restcountries.com/v3.1';\n\nexport const ENDPOINTS = {\n  all: '/all',\n};\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nconst request = <T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> => {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n};\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n};\n","import React, { FC, memo } from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport Typography from '@mui/material/Typography';\nimport { Grid } from '@mui/material';\nimport { Country } from '../../types/Country';\n\ninterface Props {\n  country: Country;\n}\n\nexport const CountryCard: FC<Props> = memo(({ country }) => {\n  const {\n    name, flags, region, population, capital,\n  } = country;\n\n  return (\n    <Grid item xs={2}>\n      <Card sx={{ maxWidth: 345 }}>\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image={flags.svg}\n          alt=\"green iguana\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            {name.common}\n          </Typography>\n          <List>\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemText primary={`Region: ${region}`} />\n              </ListItemButton>\n            </ListItem>\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemText primary={`Population: ${population}`} />\n              </ListItemButton>\n            </ListItem>\n            <ListItem disablePadding>\n              <ListItemButton>\n                <ListItemText primary={`Capital: ${capital}`} />\n              </ListItemButton>\n            </ListItem>\n          </List>\n        </CardContent>\n        <CardActions>\n          <Button size=\"small\">Learn More</Button>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n});\n","import React, {\n  ChangeEvent, FC, useCallback, useState,\n} from 'react';\nimport debounce from 'lodash.debounce';\nimport {\n  FormControl,\n  Grid, InputLabel, MenuItem, Select, TextField,\n} from '@mui/material';\nimport { useSearchParams } from 'react-router-dom';\nimport { RegionsFilter } from '../../types/RegionsFilter';\n\nexport const Filter: FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const appliedQuery = searchParams.get('query') || '';\n  const region = searchParams.get('region') || '';\n  const [inputQuery, setInputQuery] = useState(appliedQuery);\n\n  const applyQuery = useCallback(\n    debounce((query: string) => {\n      if (query || region) {\n        setSearchParams({ query, region });\n      } else {\n        setSearchParams({});\n      }\n    }, 500),\n    [],\n  );\n\n  const handleQueryChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const handleFilterChange = (regionFilter: RegionsFilter | '') => {\n    setSearchParams({\n      query: appliedQuery,\n      region: regionFilter,\n    });\n  };\n\n  return (\n    <Grid container item xs={12}>\n      <Grid item xs={2}>\n        <TextField\n          fullWidth\n          label=\"Country\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          value={inputQuery}\n          onChange={handleQueryChange}\n        />\n      </Grid>\n      <Grid item xs={8} />\n      <Grid item xs={2}>\n\n        <FormControl fullWidth>\n          <InputLabel id=\"demo-simple-select-label\">Region</InputLabel>\n          <Select\n            value={region}\n            label=\"Region\"\n            onChange={(event) => handleFilterChange(event.target.value as RegionsFilter)}\n          >\n            <MenuItem value=\"\">All</MenuItem>\n            <MenuItem value={RegionsFilter.Africa}>Africa</MenuItem>\n            <MenuItem value={RegionsFilter.Americas}>Americas</MenuItem>\n            <MenuItem value={RegionsFilter.Asia}>Asia</MenuItem>\n            <MenuItem value={RegionsFilter.Europe}>Europe</MenuItem>\n            <MenuItem value={RegionsFilter.Oceania}>Oceania</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport './App.scss';\nimport { Grid, Paper } from '@mui/material';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { useSearchParams } from 'react-router-dom';\nimport { client, ENDPOINTS } from './api/countries';\nimport { CountryCard } from './components/CountryCard';\nimport { Filter } from './components/Filter';\nimport { Country } from './types/Country';\n\nexport const App: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const appliedQuery = searchParams.get('query') || '';\n  const region = searchParams.get('region') || '';\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    client.get<Country[]>(ENDPOINTS.all)\n      .then(setCountries)\n      .catch(setError)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedCountries = useMemo(() => {\n    const query = appliedQuery.toLowerCase();\n\n    return countries.filter(country => (\n      country.region.includes(region) && country.name.common.toLowerCase().includes(query)\n    ));\n  }, [appliedQuery, region, countries]);\n\n  return (\n    <div className=\"app\">\n      <Paper elevation={8}>\n        <h1 className=\"app__header\">Where in the world?</h1>\n      </Paper>\n\n      {isLoading && <LinearProgress />}\n\n      {!error && (\n        <Paper elevation={16} style={{ padding: '20px' }}>\n          <Filter />\n          <Grid container spacing={2}>\n            {preparedCountries.map(country => (\n              <CountryCard country={country} key={country.name.common} />\n            ))}\n          </Grid>\n        </Paper>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Routes } from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\">\n          <Route index element={<App />} />\n          <Route path=\":filterType\" element={<App />} />\n        </Route>\n      </Routes>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}